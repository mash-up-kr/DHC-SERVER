name: CI Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.NCP_CONTAINER_REGISTRY }}
  IMAGE_NAME: dhc-ktor-app

jobs:
  build-and-push:
    name: 빌드 및 푸시
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle 설정
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            wrapper

      - name: JAR 빌드
        run: |
          ./gradlew buildFatJar \
            --no-daemon \
            --build-cache \
            --parallel
        env:
          GRADLE_OPTS: "-Xmx2g -XX:MaxMetaspaceSize=512m"

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: NCP 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}

      - name: 메타데이터 추출
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-,format=short
            type=raw,value={{date 'YYYYMMDD-HHmmss' tz='Asia/Seoul'}}

      - name: 빌드 및 푸시
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_TIME=${{ github.event.repository.updated_at }}
            BUILDKIT_INLINE_CACHE=1
          provenance: false
          platforms: linux/amd64,linux/arm64

      - name: 빌드 요약
        run: |
          echo "### 🚀 빌드 완료" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 📦 이미지 정보" >> $GITHUB_STEP_SUMMARY
          echo "- **레지스트리:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **이미지:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **태그:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | sed 's/,/\n/g' | sed 's/^/  - /' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 🔍 상세 정보" >> $GITHUB_STEP_SUMMARY
          echo "- **커밋:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **다이제스트:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **빌드 시간:** $(date +'%Y-%m-%d %H:%M:%S KST')" >> $GITHUB_STEP_SUMMARY

#      - name: Slack 알림
#        uses: 8398a7/action-slack@v3
#        if: always() && secrets.SLACK_WEBHOOK_URL != ''
#        with:
#          status: ${{ job.status }}
#          text: |
#            CI Pipeline: ${{ job.status }}
#            Branch: ${{ github.ref_name }}
#            Commit: ${{ github.sha }}
#            Image: ${{ steps.meta.outputs.tags }}
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}