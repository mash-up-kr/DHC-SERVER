name: PR Build

on:
  pull_request:
    types: [ opened, synchronize, reopened ]

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  changes:
    name: 변경사항 감지
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      docker: ${{ steps.filter.outputs.docker }}
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 경로 필터링
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'src/**'
              - 'build.gradle.kts'
              - 'gradle/**'
              - 'settings.gradle.kts'
            docker:
              - 'Dockerfile'
              - 'container/**'

  ktlint:
    name: Ktlint 검사
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle 설정
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      - name: Ktlint 실행
        run: ./gradlew ktlintCheck --no-daemon --build-cache

  test:
    name: 테스트
    runs-on: ubuntu-22.04
    needs: changes
    if: needs.changes.outputs.backend == 'true'

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle 설정
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            wrapper
          gradle-home-cache-excludes: |
            caches/journal-1
            caches/transforms-*/results.bin

      - name: 테스트
        run: |
          ./gradlew test \
            --no-daemon \
            --parallel \
            --max-workers=2 \
            --build-cache \
            --continue
        env:
          SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/test
          CI: true
          GITHUB_ACTIONS: true
          GRADLE_OPTS: "-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError"

      - name: 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: |
            build/test-results/
            build/reports/tests/
          retention-days: 1

  build:
    name: 빌드
    runs-on: ubuntu-22.04
    needs: [ktlint, test]

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle 설정
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      - name: 빌드
        run: |
          ./gradlew buildFatJar \
            --no-daemon \
            --build-cache \
            -x test \
            -x ktlintCheck
        env:
          GRADLE_OPTS: "-Xmx2g -XX:MaxMetaspaceSize=512m"

      - name: 빌드 결과물 업로드
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/*.jar
          retention-days: 1
          compression-level: 6

  docker-validate:
    name: Docker 검증
    runs-on: ubuntu-22.04
    needs: [ changes, build ]
    if: needs.changes.outputs.docker == 'true' || needs.changes.outputs.backend == 'true'

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 빌드 결과물 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/libs

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Dockerfile 린트
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

      - name: 저장소 이름 소문자 변환
        id: repo-name
        run: |
          echo "lowercase=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: 이미지 빌드
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.repo-name.outputs.lowercase }}:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  pr-comment:
    name: PR 코멘트
    runs-on: ubuntu-latest
    needs: [ktlint, test, build, docker-validate]
    if: always()

    steps:
      - name: PR 코멘트 작성
        uses: actions/github-script@v7
        with:
          script: |
            const ktlintResult = '${{ needs.ktlint.result }}';
            const testResult = '${{ needs.test.result }}';
            const buildResult = '${{ needs.build.result }}';
            const dockerResult = '${{ needs.docker-validate.result }}';
            
            const allSuccess = ktlintResult === 'success' && 
                              testResult === 'success' && 
                              buildResult === 'success';
            const status = allSuccess ? '✅ 성공' : '❌ 실패';
            
            const getIcon = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⚠️';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };
            
            const body = `### PR 빌드 ${status}
            
            | 단계 | 결과 | 상태 |
            |------|------|------|
            | Ktlint 검사 | ${getIcon(ktlintResult)} | ${ktlintResult} |
            | 테스트 | ${getIcon(testResult)} | ${testResult} |
            | 빌드 | ${getIcon(buildResult)} | ${buildResult} |
            | Docker 검증 | ${getIcon(dockerResult || 'skipped')} | ${dockerResult || 'skipped'} |
            
            **커밋:** \`${context.sha.substring(0, 7)}\`
            **실행 시간:** ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}
            **워크플로우:** [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
            
            // 이전 봇 코멘트 찾기
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('### PR 빌드')
            );
            
            if (botComment) {
              // 기존 코멘트 업데이트
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // 새 코멘트 생성
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }