openapi: "3.0.3"
info:
  title: "Application API"
  description: "Application API"
  version: "1.0.0"
paths:
  /api/users:
    get:
      summary: "Search User by Token"
      description: "Find a user by their user token"
      parameters:
        - name: userToken
          in: query
          required: true
          schema:
            type: string
          description: "User token to search for"
          example: "user123token"
      responses:
        "200":
          description: "User found successfully"
          content:
            application/json:
              schema:
                type: string
                description: "User ID"
              example: "507f1f77bcf86cd799439011"
        "404":
          description: "User not found"
          content:
            text/plain:
              schema:
                type: "string"
              example: "User not found"

  /api/users/register:
    post:
      summary: "Register User"
      description: "Register a new user with their profile information and mission preferences"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserRequest"
            example:
              userToken: "user123token"
              gender: "MALE"
              birthDate:
                date: "2000-01-01"
                calendarType: "SOLAR"
              birthTime: "09:30:00"
              preferredMissionCategoryList: [ "FOOD", "TRANSPORTATION" ]
      responses:
        "201":
          description: "User registered successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterUserResponse"
              example:
                id: "507f1f77bcf86cd799439011"
        "409":
          description: "User already exists"
          content:
            text/plain:
              schema:
                type: "string"
              example: "User already exists"

  /api/users/{userId}/missions/{missionId}:
    put:
      summary: "Change Mission Status"
      description: "Change the completion status of a specific mission for a user or switch to a new mission"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: "User ID"
          example: "507f1f77bcf86cd799439011"
        - name: missionId
          in: path
          required: true
          schema:
            type: string
          description: "Mission ID"
          example: "507f1f77bcf86cd799439022"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ToggleMissionRequest"
            examples:
              complete_mission:
                summary: "Complete a mission"
                value:
                  finished: true
              switch_mission:
                summary: "Switch to a new mission"
                value:
                  switch: true
              mark_incomplete:
                summary: "Mark mission as incomplete"
                value:
                  finished: false
      responses:
        "200":
          description: "Mission status updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToggleMissionResponse"
              example:
                missions:
                  - missionId: "507f1f77bcf86cd799439022"
                    category: "식음료"
                    difficulty: 3
                    type: "DAILY"
                    finished: true
                    cost: "10.00"
                    endDate: "2024-01-15"
                    title: "오늘 점심은 집에서 해먹기"
                    switchCount: 0

  /api/users/{userId}/done:
    post:
      summary: "End Today's Missions"
      description: "Complete today's missions and calculate total saved money"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: "User ID"
          example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EndTodayMissionRequest"
            example:
              date: "2024-01-15"
      responses:
        "200":
          description: "Today's missions completed successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EndTodayMissionResponse"
              example:
                todaySavedMoney: "25.50"

  /api/users/{userId}:
    delete:
      summary: "Delete User"
      description: "Delete user account"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: "User ID"
          example: "507f1f77bcf86cd799439011"
      responses:
        "200":
          description: "User deleted successfully"
        "404":
          description: "User not found"
          content:
            text/plain:
              schema:
                type: "string"
              example: "User not found"

  /api/mission-categories:
    get:
      summary: "Get Mission Categories"
      description: "Get all available mission categories with their names and image URLs"
      responses:
        "200":
          description: "Mission categories retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissionCategoriesResponse"
              example:
                categories:
                  - name: "TRANSPORTATION"
                    displayName: "이동·교통"
                    imageUrl: "https://kr.object.ncloudstorage.com/dhc-object-storage/uploads/transportation.png"
                  - name: "FOOD"
                    displayName: "식음료"
                    imageUrl: "https://kr.object.ncloudstorage.com/dhc-object-storage/uploads/food.png"
                  - name: "DIGITAL"
                    displayName: "디지털·구독"
                    imageUrl: "https://kr.object.ncloudstorage.com/dhc-object-storage/uploads/digital.png"
                  - name: "SHOPPING"
                    displayName: "쇼핑"
                    imageUrl: "https://kr.object.ncloudstorage.com/dhc-object-storage/uploads/shopping.png"
                  - name: "TRAVEL"
                    displayName: "취미·문화"
                    imageUrl: "https://kr.object.ncloudstorage.com/dhc-object-storage/uploads/travel.png"
                  - name: "SOCIAL"
                    displayName: "사교·모임"
                    imageUrl: "https://kr.object.ncloudstorage.com/dhc-object-storage/uploads/social.png"

  /view/users/{userId}/home:
    get:
      summary: "Get Home View"
      description: "Get user's home view with long-term mission, today's daily missions, and today's fortune"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: "User ID"
          example: "507f1f77bcf86cd799439011"
      responses:
        "200":
          description: "Home view data retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HomeViewResponse"
              example:
                longTermMission:
                  missionId: "507f1f77bcf86cd799439033"
                  category: "취미·문화"
                  difficulty: 5
                  type: "LONG_TERM"
                  finished: false
                  cost: "100.00"
                  endDate: "2024-12-31"
                  title: "여행 가기 위해 돈 모으기"
                  switchCount: 0
                todayDailyMissionList:
                  - missionId: "507f1f77bcf86cd799439044"
                    category: "식음료"
                    difficulty: 2
                    type: "DAILY"
                    finished: false
                    cost: "15.00"
                    endDate: "2024-01-15"
                    title: "점심 도시락 싸가기"
                    switchCount: 1
                  - missionId: "507f1f77bcf86cd799439055"
                    category: "이동·교통"
                    difficulty: 1
                    type: "DAILY"
                    finished: true
                    cost: "5.00"
                    endDate: "2024-01-15"
                    title: "대중교통 이용하기"
                    switchCount: 0
                todayDailyFortune:
                  date: "2024-01-15"
                  fortuneTitle: "좋은 하루"
                  fortuneDetail: "오늘은 좋은 일이 생길 것입니다"
                  jinxedColor: "빨간색"
                  jinxedColorHex: "#FF0000"
                  jinxedMenu: "매운 음식"
                  jinxedNumber: 4
                  luckyColor: "파란색"
                  luckyColorHex: "#0000FF"
                  luckyNumber: 7
                  score: 85
                  todayMenu: "샐러드"

  /view/users/{userId}/myPage:
    get:
      summary: "Get My Page View"
      description: "Get user's profile information with animal card"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: "User ID"
          example: "507f1f77bcf86cd799439011"
      responses:
        "200":
          description: "My page data retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MyPageResponse"
              example:
                animalCard:
                  name: "봄의 흰 말"
                  cardImageUrl: ""
                birthDate:
                  date: "2000-01-01"
                  calendarType: "SOLAR"
                birthTime: "09:30:00"
                preferredMissionCategoryList:
                  - name: "FOOD"
                    displayName: "식음료"
                    imageUrl: "https://kr.object.ncloudstorage.com/dhc-object-storage/uploads/food.png"
                  - name: "TRANSPORTATION"
                    displayName: "이동·교통"
                    imageUrl: "https://kr.object.ncloudstorage.com/dhc-object-storage/uploads/transportation.png"
                alarm: true
        "404":
          description: "User not found"
          content:
            text/plain:
              schema:
                type: "string"
              example: "User not found"

  /view/users/{userId}/analysis:
    get:
      summary: "Get Analysis View"
      description: "Get user's spending analysis and mission completion statistics with generation comparison data"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: "User ID"
          example: "507f1f77bcf86cd799439011"
      responses:
        "200":
          description: "Analysis data retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisViewResponse"
              example:
                totalSavedMoney: "1250.00"
                weeklySavedMoney: "85.50"
                generationMoneyViewResponse:
                  generation: "TWENTIES"
                  gender: "MALE"
                  averageSpendMoney: "70400.00"
        "404":
          description: "User not found"
          content:
            text/plain:
              schema:
                type: "string"
              example: "User not found"

  /view/users/{userId}/calendar:
    get:
      summary: "Get Calendar View"
      description: "Get user's calendar view with three months of mission completion data based on the specified year-month"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: "User ID"
          example: "507f1f77bcf86cd799439011"
        - name: yearMonth
          in: query
          required: false
          schema:
            type: string
            pattern: "^\\d{4}-\\d{2}$"
          description: "Base year-month in YYYY-MM format. If not provided, uses current year-month."
          example: "2024-01"
      responses:
        "200":
          description: "Calendar data retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CalendarViewResponse"
              example:
                threeMonthViewResponse:
                  - month: 12
                    averageSucceedProbability: 70
                    calendarDayMissionViews:
                      - day: 30
                        date: "2023-12-30"
                        finishedMissionCount: 2
                        totalMissionCount: 3
                      - day: 31
                        date: "2023-12-31"
                        finishedMissionCount: 1
                        totalMissionCount: 2
                  - month: 1
                    averageSucceedProbability: 75
                    calendarDayMissionViews:
                      - day: 15
                        date: "2024-01-15"
                        finishedMissionCount: 2
                        totalMissionCount: 3
                      - day: 16
                        date: "2024-01-16"
                        finishedMissionCount: 3
                        totalMissionCount: 3
                  - month: 2
                    averageSucceedProbability: 80
                    calendarDayMissionViews:
                      - day: 1
                        date: "2024-02-01"
                        finishedMissionCount: 1
                        totalMissionCount: 2
                      - day: 2
                        date: "2024-02-02"
                        finishedMissionCount: 2
                        totalMissionCount: 2
        "404":
          description: "User not found"
          content:
            text/plain:
              schema:
                type: "string"
              example: "User not found"

  /api/storage/upload:
    post:
      summary: "Upload File"
      description: "Upload a file to storage"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "File to upload"
                displayLogo:
                  type: string
                  description: "Display logo identifier"
                  example: "company-logo"
      responses:
        "200":
          description: "File uploaded successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"
              example:
                url: "https://storage.example.com/uploads/file.jpg"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "파일이 없습니다"

  /api/storage/{key}:
    delete:
      summary: "Delete File"
      description: "Delete a file from storage"
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: "File key to delete"
          example: "uploads/file.jpg"
      responses:
        "204":
          description: "File deleted successfully"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "키가 필요합니다"

  /api/storage/url/{key}:
    get:
      summary: "Get File URL"
      description: "Get the URL of a file in storage"
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: "File key"
          example: "uploads/file.jpg"
      responses:
        "200":
          description: "File URL retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"
              example:
                url: "https://storage.example.com/uploads/file.jpg"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "키가 필요합니다"

components:
  schemas:
    RegisterUserRequest:
      type: object
      required:
        - userToken
        - gender
        - preferredMissionCategoryList
      properties:
        userToken:
          type: string
          description: "Unique token for the user"
          example: "user123token"
        gender:
          $ref: "#/components/schemas/Gender"
        birthDate:
          $ref: "#/components/schemas/BirthDate"
        birthTime:
          type: string
          format: time
          description: "Birth time in HH:mm:ss format"
          example: "09:30:00"
          nullable: true
        preferredMissionCategoryList:
          type: array
          items:
            $ref: "#/components/schemas/MissionCategory"
          description: "List of preferred mission categories"
          example: [ "FOOD", "TRANSPORTATION" ]

    RegisterUserResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: "Generated user ID"
          example: "507f1f77bcf86cd799439011"

    ToggleMissionRequest:
      type: object
      properties:
        finished:
          type: boolean
          description: "Whether the mission is completed"
          example: true
          nullable: true
        switch:
          type: boolean
          description: "Whether to switch the mission"
          example: false
          nullable: true

    ToggleMissionResponse:
      type: object
      required:
        - missions
      properties:
        missions:
          type: array
          items:
            $ref: "#/components/schemas/Mission"
          description: "List of missions (today's daily missions and long-term mission if exists)"

    EndTodayMissionRequest:
      type: object
      required:
        - date
      properties:
        date:
          type: string
          format: date
          description: "Date in YYYY-MM-DD format"
          example: "2024-01-15"

    EndTodayMissionResponse:
      type: object
      required:
        - todaySavedMoney
      properties:
        todaySavedMoney:
          type: string
          description: "Total money saved today"
          example: "25.50"

    HomeViewResponse:
      type: object
      properties:
        longTermMission:
          $ref: "#/components/schemas/Mission"
          nullable: true
        todayDailyMissionList:
          type: array
          items:
            $ref: "#/components/schemas/Mission"
          description: "List of today's daily missions"
        todayDailyFortune:
          $ref: "#/components/schemas/DailyFortune"
          nullable: true

    MissionCategoriesResponse:
      type: object
      required:
        - categories
      properties:
        categories:
          type: array
          items:
            $ref: "#/components/schemas/MissionCategoryResponse"
          description: "List of all available mission categories"

    MissionCategoryResponse:
      type: object
      required:
        - name
        - displayName
        - imageUrl
      properties:
        name:
          type: string
          description: "Mission category name (enum value)"
          example: "FOOD"
        displayName:
          type: string
          description: "Mission category display name in Korean"
          example: "식음료"
        imageUrl:
          type: string
          description: "URL of the category image"
          example: "https://kr.object.ncloudstorage.com/dhc-object-storage/uploads/food.png"

    MyPageResponse:
      type: object
      required:
        - animalCard
        - birthDate
        - preferredMissionCategoryList
        - alarm
      properties:
        animalCard:
          $ref: "#/components/schemas/AnimalCard"
        birthDate:
          $ref: "#/components/schemas/BirthDate"
        birthTime:
          type: string
          format: time
          description: "Birth time in HH:mm:ss format"
          example: "09:30:00"
          nullable: true
        preferredMissionCategoryList:
          type: array
          items:
            $ref: "#/components/schemas/MissionCategoryResponse"
          description: "List of preferred mission categories with image URLs"
        alarm:
          type: boolean
          description: "Whether alarm is enabled"
          example: true
    
    AnalysisViewResponse:
      type: object
      required:
        - totalSavedMoney
        - weeklySavedMoney
        - generationMoneyViewResponse
      properties:
        totalSavedMoney:
          type: string
          description: "Total amount of money saved"
          example: "1250.00"
        weeklySavedMoney:
          type: string
          description: "Amount of money saved this week"
          example: "85.50"
        generationMoneyViewResponse:
          $ref: "#/components/schemas/GenerationMoneyViewResponse"
          description: "Generation-based spending comparison data"
    
    AnalysisMonthViewResponse:
      type: object
      required:
        - month
        - averageSucceedProbability
        - calendarDayMissionViews
      properties:
        month:
          type: integer
          minimum: 1
          maximum: 12
          description: "Month number (1-12)"
          example: 1
        averageSucceedProbability:
          type: integer
          description: "Average success probability as percentage for this month"
          example: 75
        calendarDayMissionViews:
          type: array
          items:
            $ref: "#/components/schemas/CalendarDayMissionView"
          description: "Calendar view of daily missions for this month"
    
    UserProfile:
      type: object
      required:
        - id
        - userToken
        - gender
        - preferredMissionCategoryList
      properties:
        id:
          type: string
          description: "User ID"
          example: "507f1f77bcf86cd799439011"
        userToken:
          type: string
          description: "User token"
          example: "user123token"
        gender:
          $ref: "#/components/schemas/Gender"
        birthDate:
          $ref: "#/components/schemas/BirthDate"
        birthTime:
          type: string
          format: time
          description: "Birth time in HH:mm:ss format"
          example: "09:30:00"
          nullable: true
        preferredMissionCategoryList:
          type: array
          items:
            $ref: "#/components/schemas/MissionCategory"
          description: "List of preferred mission categories"
    
    AnimalCard:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: "Animal card name"
          example: "봄의 흰 말"
        cardImageUrl:
          type: string
          description: "URL of the animal card image"
          example: ""
          nullable: true
    
    Mission:
      type: object
      required:
        - missionId
        - category
        - difficulty
        - type
        - finished
        - cost
        - endDate
        - title
        - switchCount
      properties:
        missionId:
          type: string
          description: "Mission ID"
          example: "507f1f77bcf86cd799439022"
        category:
          type: string
          description: "Mission category display name in Korean"
          example: "식음료"
        difficulty:
          type: integer
          minimum: 1
          maximum: 5
          description: "Mission difficulty level"
          example: 3
        type:
          $ref: "#/components/schemas/MissionType"
        finished:
          type: boolean
          description: "Whether the mission is completed"
          example: false
        cost:
          type: string
          description: "Mission cost/reward amount"
          example: "10.00"
        endDate:
          type: string
          format: date
          description: "Mission end date in YYYY-MM-DD format"
          example: "2024-12-31"
        title:
          type: string
          description: "Mission title"
          example: "오늘 점심은 집에서 해먹기"
        switchCount:
          type: integer
          description: "Number of times mission has been switched"
          example: 0
    
    DailyFortune:
      type: object
      required:
        - date
        - fortuneTitle
        - fortuneDetail
        - jinxedColor
        - jinxedColorHex
        - jinxedMenu
        - jinxedNumber
        - luckyColor
        - luckyColorHex
        - luckyNumber
        - score
        - todayMenu
      properties:
        date:
          type: string
          description: "Fortune date in YYYY-MM-DD format"
          example: "2024-01-15"
        fortuneTitle:
          type: string
          description: "Fortune title"
          example: "좋은 하루"
        fortuneDetail:
          type: string
          description: "Detailed fortune description"
          example: "오늘은 좋은 일이 생길 것입니다"
        jinxedColor:
          type: string
          description: "Unlucky color name"
          example: "빨간색"
        jinxedColorHex:
          type: string
          description: "Unlucky color hex code"
          example: "#FF0000"
        jinxedMenu:
          type: string
          description: "Food to avoid today"
          example: "매운 음식"
        jinxedNumber:
          type: integer
          description: "Unlucky number"
          example: 4
        luckyColor:
          type: string
          description: "Lucky color name"
          example: "파란색"
        luckyColorHex:
          type: string
          description: "Lucky color hex code"
          example: "#0000FF"
        luckyNumber:
          type: integer
          description: "Lucky number"
          example: 7
        score:
          type: integer
          minimum: 0
          maximum: 100
          description: "Fortune score"
          example: 85
        todayMenu:
          type: string
          description: "Recommended food for today"
          example: "샐러드"
    
    Gender:
      type: string
      enum:
        - MALE
        - FEMALE
      description: "User gender"
      example: "MALE"
    
    BirthDate:
      type: object
      required:
        - date
        - calendarType
      properties:
        date:
          type: string
          format: date
          description: "Birth date in YYYY-MM-DD format"
          example: "2000-01-01"
        calendarType:
          $ref: "#/components/schemas/CalendarType"
      nullable: true
    
    CalendarType:
      type: string
      enum:
        - SOLAR
        - LUNAR
      description: "Calendar type for birth date"
      example: "SOLAR"
    
    MissionCategory:
      type: string
      enum:
        - TRANSPORTATION
        - FOOD
        - DIGITAL
        - SHOPPING
        - TRAVEL
        - SOCIAL
      description: "Mission category"
      example: "FOOD"
    
    MissionType:
      type: string
      enum:
        - LONG_TERM
        - DAILY
      description: "Mission type"
      example: "DAILY"
    
    UploadResponse:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          description: "URL of the uploaded file"
          example: "https://storage.example.com/uploads/file.jpg"
    
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: "Error message"
          example: "파일이 없습니다"
    
    CalendarDayMissionView:
      type: object
      required:
        - day
        - date
        - finishedMissionCount
        - totalMissionCount
      properties:
        day:
          type: integer
          description: "Day of the month"
          example: 15
        date:
          type: string
          format: date
          description: "Date in YYYY-MM-DD format"
          example: "2024-01-15"
        finishedMissionCount:
          type: integer
          description: "Number of finished missions for this day"
          example: 2
        totalMissionCount:
          type: integer
          description: "Total number of missions for this day"
          example: 3

    CalendarViewResponse:
      type: object
      required:
        - threeMonthViewResponse
      properties:
        threeMonthViewResponse:
          type: array
          items:
            $ref: "#/components/schemas/AnalysisMonthViewResponse"
          description: "Calendar data for three months (previous, current, next)"

    GenerationMoneyViewResponse:
      type: object
      required:
        - generation
        - gender
        - averageSpendMoney
      properties:
        generation:
          $ref: "#/components/schemas/Generation"
        gender:
          $ref: "#/components/schemas/Gender"
        averageSpendMoney:
          type: string
          description: "Average spending money for this generation and gender"
          example: "70400.00"

    Generation:
      type: string
      enum:
        - TEENAGERS
        - TWENTIES
        - THIRTIES
        - FORTIES
        - UNKNOWN
      description: "User generation based on age"
      example: "TWENTIES"